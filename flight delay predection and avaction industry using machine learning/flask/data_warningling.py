# -*- coding: utf-8 -*-
"""data  warningling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zLlFZV7NrdsFeYWabQT_LsC8t85jBC2_
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

plt.style.available

plt.style.use('fivethirtyeight')

df = pd.read_csv('/content/flightdata.csv')

df.head()

df.info()

sns.distplot(df['ARR_TIME'])

sns.distplot(df['CRS_ARR_TIME'])

df_cat = df.select_dtypes(include='object')
df_cat.head()

for i,j in enumerate(df_cat):
  print(j)
  print(i)

plt.figure(figsize=(18,4))
for i,j in enumerate(df_cat):
  plt.subplot(1,4,i+1)

plt.figure(figsize=(18,4))
plt.subplot(121)
plt.subplot(122)
sns.countplot(df['DAY_OF_MONTH'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(131)
sns.countplot(df['ACTUAL_ELAPSED_TIME'])
plt.subplot(132)
sns.countplot(x='UNIQUE_CARRIER',data=df)

df['DAY_OF_MONTH'] = ['15 to 30' if x<=30 else "30-50" if x>30 and x<50 else '50+' for x in df['DAY_OF_MONTH']]

df.head()

pd.crosstab(df['DEP_DELAY'],df['Unnamed: 25'])

sns.heatmap(df.corr())

df.describe(include='all')

df.shape

df.isnull().any()

df.isnull().sum()

df.dropna()

df.isnull().any()

sns.boxplot(df['DISTANCE'])

q1 = np.quantile(df['DISTANCE'],0.25)
q3 = np.quantile(df['DISTANCE'],0.75)

print('Q1 ={}'.format(q1))
print('Q3 ={}'.format(q3))

IQR = q3-q1

print('IQR value is {}'.format(IQR))

df.info()

sns.boxplot(df['DAY_OF_WEEK'])

q1 = np.quantile(df['DISTANCE'],0.25)
q3 = np.quantile(df['DISTANCE'],0.75)

print('Q1 ={}'.format(q1))
print('Q3 ={}'.format(q3))

IQR = q3-q1

print('IQR value is {}'.format(IQR))

upperBound = q3+(1.6*IQR)
lowerBound = q1-(1.6*IQR)

print('the upper bound value is {} & The lower bound value is {}'.format(upperBound,lowerBound))

print('skwed data:',len(df['DISTANCE']>upperBound))

sns.distplot(df['DAY_OF_WEEK'])

sns.distplot(df['DAY_OF_WEEK'])

sns.distplot(df['DAY_OF_WEEK'])

df.head()

df['DISTANCE'] = [0 if x=='low' else 1 if x=='normal' else 2 for x in df['DISTANCE']]

df.head()

x = df.drop('DAY_OF_WEEK',axis=1)
x.head()

y =df['DAY_OF_WEEK']
y

# import necessary reg

import numpy as np
import pandas as pd

df = pd.read_csv('/content/flightdata.csv')

df.head()

df.info()

df.describe()

df.isnull().sum()

import matplotlib.pyplot as plt

plt.scatter(df['DAY_OF_MONTH'],df['QUARTER'])

x = df.iloc[:,0:1]
x.head()

y = df.iloc[:,1:]
y.head()

y = df.iloc[:,1:]
y.head()

from sklearn.linear_model import LinearRegression

lr = LinearRegression

df['ORIGIN'].unique()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

df.head()

x = df.iloc[:,0:4]
x.head()

y = df.iloc[:,4:]
y.head()

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=10)

print(xtrain.shape)
print(xtest.shape)

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

from sklearn.metrics import r2_score

r2_score(ytest,ypred)

plt.scatter(df['FL_NUM'],df['CRS_ARR_TIME'])

py = PolynomialFeatures()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

py = PolynomialFeatures()

x = py.fit_transform(x)
x

lr = LinearRegression()

py = PolynomialFeatures(degree=5)

xp = py.fit_transform(x)
xp

import numpy as np
import pandas as pd
import seaborn as sns 
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix

df = pd.read_csv('/content/flightdata.csv')
df.head()

df.describe(include='all')

x = df.iloc[:,0:4]
x.head()

y = df.iloc[:,4:]
y.head()

df.shape

df.info()

df.isnull().sum()

df.corr()

x = df.iloc[:,1:2]
x.head()

y = df.iloc[1,2:]
y.head()

import numpy as np
import pandas as pd
import seaborn as sns 
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix

df = pd.read_csv('/content/flightdata.csv')

df.head()

df.info()

sns.boxplot(df['CRS_DEP_TIME'])

from sklearn.tree import DecisionTreeClassifier

from sklearn.ensemble import RandomForestClassifier

from sklearn.model_selection import train_test_split

from sklearn.metrics import classification_report, confusion_matrix

sns.boxplot(df['CRS_ARR_TIME'])

